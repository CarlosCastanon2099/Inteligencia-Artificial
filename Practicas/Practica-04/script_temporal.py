"""practica04.ipynb

# üå† Pr√°ctica 04: La poderosa $A^{‚àó}$ üåü

----

----


### üìå **Definimos la Clase Agente**

<div style="text-align: justify">

El agente tiene que explorar el laberinto y encontrar la salida. Al crearlo, solo le damos su posici√≥n inicial en el laberinto, como si estuviera parado en la entrada, mirando hacia adentro, pregunt√°ndose qu√© le depara el destino.

Tiene que moverse pero no puede simplemente moverse como sea debe evitar obst√°culos. Le decimos en qu√© direcci√≥n ir ("arriba", "abajo", "izquierda", "derecha"), y √©l verifica si el camino est√° libre. Si encuentra un muro (un obst√°culo representado por un 1), sabe que debe detenerse y pensar en otro camino.

</div>
"""

class Agente:
    def __init__(self, posicion):
        """
        Inicializa un objeto Agente con una posici√≥n dada.

        Args:
            posicion (list): La posici√≥n inicial del agente en forma de lista [x, y].
        """
        self.posicion = posicion

    def mover(self, direccion, laberinto):
        """
        Mueve el agente en la direcci√≥n especificada si es un movimiento v√°lido.

        Args:
            direccion (str): La direcci√≥n en la que se desea mover el agente ("arriba", "abajo", "izquierda", "derecha").
            laberinto (list): El laberinto en forma de matriz.

        Returns:
            list or None: La nueva posici√≥n del agente si el movimiento es v√°lido, None en caso contrario.
        """
        x, y = self.posicion
        # Mueve el agente arriba si no es l√≠mite superior, y donde la celda destino no es un obst√°culo.
        if direccion == "arriba" and x > 0 and laberinto[x-1][y] != 1:
            self.posicion = [x-1, y]
        # Mueve el agente abajo si no es l√≠mite inferior, y donde la celda destino no es un obst√°culo.
        elif direccion == "abajo" and x < len(laberinto) - 1 and laberinto[x+1][y] != 1:
            self.posicion = [x+1, y]
        # Mueve el agente izquierda si no es l√≠mite izquierdo, y donde la celda destino no es un obst√°culo.
        elif direccion == "izquierda" and y > 0 and laberinto[x][y-1] != 1:
            self.posicion = [x, y-1]
        # Mueve el agente derecha si no es l√≠mite derecho, y donde la celda destino no es un obst√°culo.
        elif direccion == "derecha" and y < len(laberinto[0]) - 1 and laberinto[x][y+1] != 1:
            self.posicion = [x, y+1]
        else:
            return None

        return self.posicion

"""#### ‚û°Ô∏è **Flechas**

<div style="text-align: justify">

Mientras nuestro agente explora, vamos a dejar un rastro de su viaje. Para eso utilizamos la funci√≥n flechas. Cada vez que el Agente toma una decisi√≥n sobre hacia d√≥nde moverse, convertimos esa direcci√≥n en una flecha visual ("‚Üë", "‚Üì", "‚Üê", "‚Üí").

</div>
"""

'''
Funcion que recibe una direcci√≥n y retorna la flecha correspondiente a la direcci√≥n.
'''
def flechas(direccion):
    """
    Devuelve una flecha correspondiente a la direcci√≥n dada.

    Par√°metros:
    direccion (str): La direcci√≥n de la flecha. Puede ser "arriba", "abajo", "izquierda" o "derecha".

    Retorna:
    str: La flecha correspondiente a la direcci√≥n dada.
    """
    if direccion == "arriba":
        return  "‚Üë"
    elif direccion == "abajo":
        return  "‚Üì"
    elif direccion == "izquierda":
        return  "‚Üê"
    elif direccion == "derecha":
        return  "‚Üí"

"""### üìå **Backtracking**

<div style="text-align: justify">

Funcion en la que definimos el backtracking que usar√° el agente para encontrar (o no) la salida del laberinto. Esta funcion regresa solo la solucion final, es decir, el camino que el agente debe seguir para llegar a la salida del laberinto y
por ende no regresa todos los posibles caminos usados por el agente.

Iniciamos marcando el comienzo de la exploraci√≥n con el registro del primer movimiento. Para evitar recorrer los mismos caminos, empleamos un conjunto de visitados, y evaluamos cada movimiento en funci√≥n de su viabilidad y su capacidad para acercarnos a la meta. Al hacer esto el agente encuentra la salida y aprende de cada paso.

</div>
"""

"""
    Realiza una b√∫squeda en profundidad (backtracking) para encontrar la salida en un laberinto.

    Par√°metros:
    - agente (agente): El agente que se mueve por el laberinto.
    - laberinto (list): El laberinto representado como una matriz.
    - visitados (set): Conjunto de celdas visitadas. Por defecto, es None.
    - instrucciones (list): Lista de instrucciones para llegar a la salida. Por defecto, es una lista vac√≠a.

    Retorna:
    - bool: True si se encuentra la salida, False si no se encuentra.

"""
def backtrack(agente, laberinto, visitados = None, instrucciones = []):
    if not instrucciones :
        instrucciones.append(f"Primer movimiento!\t Posici√≥n: [{agente.posicion[0]}, {agente.posicion[1]}]")
    if visitados is None:
        visitados = set()

    x, y = agente.posicion

    if laberinto[x][y] == "S":  # Si el agente encuentra la salida, imprime el camino y retorna True
        for i in instrucciones:
            print(i)
        print("Encontr√© la salida :D\n")
        return True
    else:
        visitados.add((x, y))  # Marcar la celda actual como visitada
        movimientos = ["arriba", "abajo", "izquierda", "derecha"]

        for movimiento in movimientos:
            agente_temp = Agente(agente.posicion[:])  # Crear una copia del agente para simular movimientos
            nueva_posicion = agente_temp.mover(movimiento, laberinto)

            if nueva_posicion and tuple(nueva_posicion) not in visitados:  # Verificar si el movimiento es v√°lido y Si la nueva posici√≥n no ha sido visitada

                instrucciones.append(f"Movimiento: {movimiento}\t Posici√≥n: {nueva_posicion}")
                if backtrack(Agente(nueva_posicion), laberinto, visitados):
                    laberinto[agente.posicion[0]][agente.posicion[1]] = flechas(movimiento)
                    return True
                else:
                    laberinto[agente.posicion[0]][agente.posicion[1]] = 0
                    instrucciones.pop()

        return False

"""**En caso de no querer usar el entorno virtual ejecutar los siguientes comandos:**"""

#pip install matplotlib
#pip install networkx
#pip install seaborn

"""**Mandamos a llamar a las librerias que usamos para la practica:**"""

import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation
from matplotlib import rc
import networkx as nx
from IPython import display
from IPython.display import HTML
import numpy as np

# Funcion auxiliar para localizar la primera "S" que se encuentre en un laberinto
# Esta es usada en las funciones de DFS y BFS.
def doxeaLaS(laberinto):
    for i in range(len(laberinto)):
        for j in range(len(laberinto[0])):
            if laberinto[i][j] == "S":
                return (i,j)

# Funcion que en base a un laberinto matricial, dibuja a este ultimo como una grafica.
def dibujar_grafo_laberinto(laberinto):
    G = nx.Graph()

    filas = len(laberinto)
    columnas = len(laberinto[0])

    # Crear nodos
    for fila in range(filas):
        for columna in range(columnas):
            # Agregar nodo con su posici√≥n como atributo
            G.add_node((fila, columna))

    # Crear aristas
    for fila in range(filas):
        for columna in range(columnas):
            # Verificar si la celda actual es un pasillo (0 o "E" o "S")
            if laberinto[fila][columna] == 0 or laberinto[fila][columna] == "E" or laberinto[fila][columna] == "S":
                # Agregar aristas a las celdas vecinas que tambi√©n son pasillos
                if fila > 0 and laberinto[fila - 1][columna] == 0:
                    G.add_edge((fila, columna), (fila - 1, columna))
                if fila < filas - 1 and laberinto[fila + 1][columna] == 0:
                    G.add_edge((fila, columna), (fila + 1, columna))
                if columna > 0 and laberinto[fila][columna - 1] == 0:
                    G.add_edge((fila, columna), (fila, columna - 1))
                if columna < columnas - 1 and laberinto[fila][columna + 1] == 0:
                    G.add_edge((fila, columna), (fila, columna + 1))

    # Dibujar el grafo
    pos = {(fila, columna): (columna, -fila) for fila in range(filas) for columna in range(columnas)}
    #print(pos)
    nx.draw(G, pos, with_labels=True, node_size=700, node_color='cyan', font_size=8, font_weight='bold')
    plt.show()

"""### **$A^{*}$**"""

xAGENTE = 0
yAGENTE = 0

laberinto = [[]]


def obtener_ruta_de_x_a_y(inicio, fin, camino):
    ruta = [fin]
    while ruta[-1] != inicio:
        try:
            ruta.append(camino[ruta[-1]])
        except KeyError:
            break
    return ruta[::-1]


def laPoderosa_A(laberinto, agente):
    G = nx.Graph()

    # Vertice Inicial (E)
    laposicionxAGENTE = agente.posicion[0]
    laposicionyAGENTE = agente.posicion[1]

    inicio = (laposicionxAGENTE, laposicionyAGENTE)

    # Vertice Final (S)
    fin = doxeaLaS(laberinto)

    filas = len(laberinto)
    columnas = len(laberinto[0])

    # Crear nodos
    for fila in range(filas):
        for columna in range(columnas):
            if laberinto[fila][columna] == "E":
                inicio = (fila, columna)  # Establecer el v√©rtice inicial
            elif laberinto[fila][columna] == "S":
                fin = (fila, columna)  # Establecer el v√©rtice final
            # Agregar nodo con su posici√≥n como atributo
            G.add_node((fila, columna))

    # Crear aristas
    for fila in range(filas):
        for columna in range(columnas):
            # Verificar si la celda actual es un pasillo (0 o "E" o "S")
            if laberinto[fila][columna] == 0 or laberinto[fila][columna] == "E" or laberinto[fila][columna] == "S":
                # Agregar aristas a las celdas vecinas que tambi√©n son pasillos
                if fila > 0 and laberinto[fila - 1][columna] == 0:
                    G.add_edge((fila, columna), (fila - 1, columna))
                if fila < filas - 1 and laberinto[fila + 1][columna] == 0:
                    G.add_edge((fila, columna), (fila + 1, columna))
                if columna > 0 and laberinto[fila][columna - 1] == 0:
                    G.add_edge((fila, columna), (fila, columna - 1))
                if columna < columnas - 1 and laberinto[fila][columna + 1] == 0:
                    G.add_edge((fila, columna), (fila, columna + 1))
    ###################################################################################
    # Algoritmo A*

    # Diccionario para guardar el camino recorrido
    camino = {}

    # Diccionario para guardar el costo acumulado
    costo_acumulado = {}

    # Diccionario para guardar el costo total
    costo_total = {}

    # Lista de los nodos por visitar (inicialmente vac√≠a)
    por_visitar = []

    # Inicializamos el diccionario de camino
    for nodo in G.nodes():
        camino[nodo] = None

    # Inicializamos el diccionario de costo acumulado
    for nodo in G.nodes():
        costo_acumulado[nodo] = float('inf')

    # Inicializamos el diccionario de costo total
    for nodo in G.nodes():
        costo_total[nodo] = float('inf')

    # Agregar el nodo inicial a la lista de nodos por visitar
    por_visitar.append(inicio)

    # El costo acumulado del nodo inicial lo iniciamos en 0
    costo_acumulado[inicio] = 0

    # Definimos la distancia Manhattan
    costo_total[inicio] = abs(fin[0] - inicio[0]) + abs(fin[1] - inicio[1])

    # Mientras la lista de nodos por visitar no este vacia
    while por_visitar:
        # Seleccionamos el nodo con el menor costo total
        nodo_actual = por_visitar[0]

        # Buscamos el nodo con el menor costo total
        for nodo in por_visitar:
            if costo_total[nodo] < costo_total[nodo_actual]:
                nodo_actual = nodo

        # Si el nodo seleccionado es el nodo final entonces terminamos >:D
        if nodo_actual == fin:
            break

        # Eliminamos el nodo seleccionado de la lista de nodos por visitar
        por_visitar.remove(nodo_actual)

        # Para cada vecino del nodo seleccionado
        for vecino in G.neighbors(nodo_actual):
            # Calculamos el nuevo costo acumulado
            nuevo_costo_acumulado = costo_acumulado[nodo_actual] + 1

            # Si el nuevo costo acumulado es menor al costo acumulado del vecino
            if nuevo_costo_acumulado < costo_acumulado[vecino]:

                # Actualizamos el costo acumulado del vecino
                costo_acumulado[vecino] = nuevo_costo_acumulado

                # Actualizamos el costo total del vecino
                costo_total[vecino] = nuevo_costo_acumulado + abs(fin[0] - vecino[0]) + abs(fin[1] - vecino[1])

                # Agregamos el vecino a la lista de nodos por visitar
                por_visitar.append(vecino)

                # Actualizamos el nodo padre del vecino
                camino[vecino] = nodo_actual
    ###################################################################################




    # Construimos la nueva gr√°fica con los nodos y aristas alcanzables por A*
    G_aEstrella = nx.Graph()
    for nodo, padre in camino.items():
        if padre is not None:
            G_aEstrella.add_edge(nodo, padre)


    # Dibujamos la grafica resultante de A*
    pos = {(fila, columna): (columna, -fila) for fila in range(filas) for columna in range(columnas)}
    # node_shapes = ["E" if nodo == inicioVertice else "S" if nodo == finVertice else "0" for nodo in G_aEstrella.nodes()]
    nx.draw(G_aEstrella, pos, with_labels=True, node_size=700, node_color='cyan', font_size=8, font_weight='bold') # node_shape=node_shapes
    plt.show()

    # Dibujamos el camino de la soluci√≥n
    pos = {(fila, columna): (columna, -fila) for fila in range(filas) for columna in range(columnas)}

    caminitoA_Estrellita = obtener_ruta_de_x_a_y(inicio, fin, camino)

    nx.draw(G_aEstrella, pos, with_labels=True, node_size=700, node_color='cyan', font_size=8, font_weight='bold')
    nx.draw_networkx_nodes(G_aEstrella, pos, nodelist=caminitoA_Estrellita, node_color='red', node_size=700)
    nx.draw_networkx_edges(G_aEstrella, pos, edgelist=[(caminitoA_Estrellita[i], caminitoA_Estrellita[i+1]) for i in range(len(caminitoA_Estrellita)-1)], edge_color='red', width=2)
    plt.show()

"""### üìå **Laberinto**
Aqu√≠ definimos el laberinto que usaremos para nuestro algoritmo.
"""

# Representaci√≥n del laberinto
laberinto = [
    ["E",  0,  0,    0,    0  ],
    [ 1,   0,  1,    1,    0  ],
    [ 0,   0,  0,    0,    0  ],
    [ 0,   1,  0,    1,    0  ],
    [ 0,   0,  0,    1,   "S" ]
]

laberintoBacktrack = [
    ["E",  0,  0,    0,    0  ],
    [ 1,   0,  1,    1,    0  ],
    [ 0,   0,  0,    0,    0  ],
    [ 0,   1,  0,    1,    0  ],
    [ 0,   0,  0,    1,   "S" ]
]

laberintoA_Estrella = [
    ["E",  0,  0,    0,    0  ],
    [ 1,   0,  1,    1,    0  ],
    [ 0,   0,  0,    0,    0  ],
    [ 0,   1,  0,    1,    0  ],
    [ 0,   0,  0,    1,   "S" ]
]

"""#### üìå **El Agente**
Creamos una instancia del agente en la entrada del laberinto (que es la (0,0), pero puede cambiar)
"""

xAGENTE = 0
yAGENTE = 0

agenteP = Agente([xAGENTE,yAGENTE])

"""#### üìå **Graficamos la grafica donde va a operar $A^{*}$**"""

graficaLaberintoA = dibujar_grafo_laberinto(laberintoA_Estrella)

"""### üìå **Ejecutamos $A^{*}$**"""

ejecucionLaberintoA = laPoderosa_A(laberintoA_Estrella, agenteP)

"""### üìå **Generador Aleatorio de Laberintos**

Modificar los parametros de filas y columnas para generar laberintos de diferentes tama√±os.
"""

# Dimensiones del laberinto
filas = 8
columnas = 8

import random
import copy

# Crear el laberinto con todos los valores aleatorios
laberintoA = [[random.choice([0,1]) for _ in range(columnas)] for _ in range(filas)]

# Elegir una posici√≥n aleatoria para la entrada (E) y la salida (S)
entrada_fila, entrada_columna = random.randint(0, filas - 1), random.randint(0, columnas - 1)
salida_fila, salida_columna = random.randint(0, filas - 1), random.randint(0, columnas - 1)

# Asegurarse que la entrada y la salida no est√©n en la misma posici√≥n
while entrada_fila == salida_fila and entrada_columna == salida_columna:
    salida_fila, salida_columna = random.randint(0, filas - 1), random.randint(0, columnas - 1)

# Establecer la entrada (E) y la salida (S)
laberintoA[entrada_fila][entrada_columna] = 'E'
laberintoA[salida_fila][salida_columna] = 'S'

laberintoCopia = copy.deepcopy(laberintoA)

# Imprimir el laberinto
for fila in laberintoA:
    print(fila)

# laberintoA[entrada_fila][entrada_columna] = 'E'
agenteA = Agente( [entrada_fila, entrada_columna] )

"""En caso de que al ejecutar no se muestren los pasos, es un alto indicativo de que no existe solucion para el laberinto generado."""

algoritmoBRUTALISIMO = backtrack(agenteA, laberintoA)

laberintoRandomA = dibujar_grafo_laberinto(laberintoCopia)

laPoderosa_A(laberintoCopia, agenteA)